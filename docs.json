[{"name":"JsonDecodeMapGen","comment":" This module takes a list of `Elm.Expression` and either calls a built-in `Json.Decode.map` function from\nthe`Json.Decode` library or creates a custom map function.\n\n@docs Generated\n@docs generate\n\n","unions":[],"aliases":[{"name":"Generated","comment":" The generated type is returned by the `generate` function. If there is no built-in `Json.Decode` function\nin the `elm-lang/json` package, a declaration will be returned. This should be put somewhere in the generated\ncode!\n","args":[],"type":"{ call : Elm.Expression -> Elm.Expression, callFrom : List.List String.String -> Elm.Expression -> Elm.Expression, declaration : Dict.Dict String.String Elm.Declaration }"}],"values":[{"name":"generate","comment":" Generate a `Json.Decode.mapX` function based on the number of expressions passed.\n\nIf there are 8 or less items in the passed list, this function will return a call to a native `Json.Decode.mapX`\nfunction. If there are more than 8 arguments, a custom `Json.Decode.mapX` function will be returned along with\nits declaration.\n\n","type":"List.List Elm.Expression -> JsonDecodeMapGen.Generated"}],"binops":[]}]