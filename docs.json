[{"name":"JsonDecodeMapGen","comment":"\n\n@docs Generated\n\n@docs generate\n\n","unions":[],"aliases":[{"name":"Generated","comment":" The generated type is returned by the `generate` function. If there is no built-in `Json.Decode` function\nin the `elm-lang/json` package, a declaration will be returned. This should be put somewhere in the generated\ncode!\n\nThe returned declaration field is a `Dict` to avoid duplicate declarations when calling `generate` recursively.\nYou can use `Dict.union` to combine different generated declarations to ensure no duplicates.\n\n","args":[],"type":"{ call : Elm.Expression -> Elm.Expression, callFrom : List.List String.String -> Elm.Expression -> Elm.Expression, declaration : Dict.Dict String.String Elm.Declaration }"}],"values":[{"name":"generate","comment":" Generate a `Json.Decode.mapX` function based on the number of expressions passed.\n\nIf there are 8 or less items in the passed list, this function will return a call to a native `Json.Decode.mapX`\nfunction (X being the number of passed arguments). If there are more than 8 arguments, a custom `Json.Decode.mapX`\nfunction will be returned along with its declaration.\n\n    JsonDecodeMapGen.generate\n        [ Elm.string \"\"\n        ]\n\nSometing else...\n\n","type":"List.List Elm.Expression -> JsonDecodeMapGen.Generated"}],"binops":[]}]